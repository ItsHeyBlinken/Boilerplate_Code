// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String    @map("first_name")
  lastName      String    @map("last_name")
  role          Role      @default(USER)
  isActive      Boolean   @default(true) @map("is_active")
  emailVerified Boolean   @default(false) @map("email_verified")
  avatarUrl     String?   @map("avatar_url")
  phone         String?
  dateOfBirth   DateTime? @map("date_of_birth")
  bio           String?
  website       String?
  location      String?
  lastLogin     DateTime? @map("last_login")
  emailVerifiedAt DateTime? @map("email_verified_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  posts         Post[]
  comments      Comment[]
  refreshTokens RefreshToken[]
  likes         Like[]
  follows       Follow[] @relation("UserFollows")
  followers     Follow[] @relation("UserFollowers")

  @@map("users")
}

model Post {
  id            String    @id @default(cuid())
  title         String
  content       String
  slug          String    @unique
  excerpt       String?
  featuredImage String?   @map("featured_image")
  status        PostStatus @default(DRAFT)
  isPublished   Boolean   @default(false) @map("is_published")
  publishedAt   DateTime? @map("published_at")
  viewCount     Int       @default(0) @map("view_count")
  likeCount     Int       @default(0) @map("like_count")
  commentCount  Int       @default(0) @map("comment_count")
  metadata      Json?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String    @map("author_id")
  comments      Comment[]
  likes         Like[]
  categories    PostCategory[]
  tags          PostTag[]

  @@map("posts")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  color       String?   @default("#3B82F6")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  posts       PostCategory[]

  @@map("categories")
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  color       String?   @default("#6B7280")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  posts       PostTag[]

  @@map("tags")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  isApproved Boolean  @default(false) @map("is_approved")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String    @map("author_id")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String    @map("post_id")
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId  String?   @map("parent_id")
  replies   Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @map("post_id")

  @@unique([userId, postId])
  @@map("likes")
}

model Follow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  follower  User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String   @map("follower_id")
  following User     @relation("UserFollows", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String @map("following_id")

  @@unique([followerId, followingId])
  @@map("follows")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  deviceInfo String? @map("device_info")
  ipAddress String?  @map("ip_address")
  isRevoked Boolean  @default(false) @map("is_revoked")
  revokedAt DateTime? @map("revoked_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")

  @@map("refresh_tokens")
}

model PostCategory {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String   @map("post_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String   @map("category_id")

  @@unique([postId, categoryId])
  @@map("post_categories")
}

model PostTag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @map("post_id")
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     String   @map("tag_id")

  @@unique([postId, tagId])
  @@map("post_tags")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}